export class Utility {
  public static createURL(
    endpoint: string,
    additionalParamMap: Map<any, any>
  ): string {
    let apiEndPoint = endpoint;
    if (additionalParamMap && additionalParamMap.size) {
      additionalParamMap.forEach((value, key) => {
        apiEndPoint = apiEndPoint.replace(new RegExp(`{(${key})}`, 'g'), value);
      });
    }
    return apiEndPoint;
  }

  public static getObjById(id: any, objList: any[], key: string) {
    return objList.filter((obj) => obj[key] === id)[0]; // find() can be used. Not used but because IE does not support
  }

  public static generateUniqueId(word?: string): string {
    return word ? `word-${Utility.randomNum()}` : `sh-${Utility.randomNum()}`;
  }

  private static randomNum() {
    return new Date().getTime() * Math.floor(Math.random() * 100);
  }

  public static getRandomName() {
    const name1 = [
      'impassioned',
      'impeccable',
      'impartial',
      'imperfect',
      'imperturbable',
      'impish',
      'impolite',
      'important',
      'impossible',
      'impractical',
      'impressionable',
      'impressive',
      'improbable',
      'impure',
      'inborn',
      'incomparable',
      'incompatible',
      'incomplete',
      'inconsequential',
      'incredible',
      'indelible',
      'inexperienced',
      'indolent',
      'infamous',
      'key',
      'kind',
      'kindhearted',
      'kindly',
      'lasting',
      'late',
      'lavish',
      'lawful',
      'lazy',
      'left',
      'legal',
      'legitimate',
      'light',
      'lighthearted',
      'likable',
      'likely',
      'limited',
      'limp',
      'limping',
      'linear',
      'lined',
      'liquid',
      'little',
      'live',
      'lively',
      'livid',
      'loathsome',
      'lone',
      'lonely',
      'long',
      'long-term',
      'loose',
      'lopsided',
      'lost',
      'loud',
      'lovable',
      'lovely',
      'loving',
      'low',
      'loyal',
      'lucky',
      'lumbering',
      'luminous',
      'lumpy',
      'lustrous',
      'luxurious',
      'mad',
      'made-up',
      'magnificent',
      'majestic',
      'major',
      'male',
      'mammoth',
      'married',
      'marvelous',
      'masculine',
      'massive',
      'mature',
      'meager',
      'mealy',
      'mean',
      'melodic',
      'memorable',
      'menacing',
      'merry',
      'messy',
      'metallic',
      'mild',
      'uniform',
      'unimportant',
    ];
    const name2 = [
      'formal',
      'jump',
      'kick',
      'opposite',
      'pass',
      'pitch',
      'remote',
      'total',
      'treat',
      'vast',
      'abuse',
      'beat',
      'burn',
      'deposit',
      'print',
      'raise',
      'sleep',
      'somewhere',
      'advance',
      'consist',
      'impress',
      'repeat',
      'round',
      'sing',
      'slide',
      'strip',
      'wish',
      'combine',
      'command',
      'dig',
      'divide',
      'equivalent',
      'hang',
      'hunt',
      'initial',
      'march',
      'mention',
      'spiritual',
      'survey',
      'tie',
      'adult',
      'brief',
      'crazy',
      'escape',
      'gather',
      'hate',
      'prior',
      'repair',
      'rough',
      'sad',
      'scratch',
      'sick',
      'strike',
      'employ',
      'external',
      'hurt',
      'illegal',
      'laugh',
      'lay',
      'mobile',
      'nasty',
      'ordinary',
      'respond',
      'royal',
      'senior',
      'split',
      'strain',
      'struggle',
      'swim',
      'train',
      'upper',
      'wash',
      'yellow',
      'convert',
      'crash',
      'dependent',
      'fold',
      'funny',
      'grab',
      'hide',
      'miss',
      'brave',
      'calm',
      'concentrate',
      'estimate',
      'grand',
      'shift',
      'shine',
      'steal',
      'suck',
      'surround',
      'bear',
      'brilliant',
      'dare',
      'dear',
      'delay',
      'drunk',
      'female',
      'hurry',
      'inevitable',
      'invite',
      'kiss',
      'neat',
      'pop',
      'punch',
      'tomorrow',
      'wake',
      'wrap',
      'yesterday',
    ];
    const name = `${Utility.capFirst(
      name1[Utility.getRandomInt(0, name1.length + 1)]
    )} ${Utility.capFirst(name2[Utility.getRandomInt(0, name2.length + 1)])}`;
    return name;
  }

  private static capFirst(name: string) {
    return name.charAt(0).toUpperCase() + name.slice(1);
  }

  private static getRandomInt(min: number, max: number) {
    return Math.floor(Math.random() * (max - min)) + min;
  }
}
